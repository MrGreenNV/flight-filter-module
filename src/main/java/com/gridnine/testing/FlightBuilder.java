package com.gridnine.testing;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Factory class to get sample list of flights.
 * The FlightBuilder class is responsible for generating a list of sample flights for testing purposes.
 * Each flight is created based on a series of date and time parameters provided to the createFlight method.
 * The flights generated by this class can be used to test flight filtering functionality.
 * @author Gridnine Systems.
 */
class FlightBuilder {

    /**
     * Creates and returns a list of sample flights for testing.
     * The flights are created based on specified date and time parameters,
     * representing various flight scenarios.
     * @return A list of sample flights with different characteristics.
     */
    static List<Flight> createFlights() {
        LocalDateTime threeDaysFromNow = LocalDateTime.now().plusDays(3);
        return Arrays.asList(
                //A normal flight with two hour duration
                createFlight(threeDaysFromNow, threeDaysFromNow.plusHours(2)),
                //A normal multi segment flight
                createFlight(threeDaysFromNow, threeDaysFromNow.plusHours(2),
                        threeDaysFromNow.plusHours(3), threeDaysFromNow.plusHours(5)),
                //A flight departing in the past
                createFlight(threeDaysFromNow.minusDays(6), threeDaysFromNow),
                //A flight that departs before it arrives
                createFlight(threeDaysFromNow, threeDaysFromNow.minusHours(6)),
                //A flight with more than two hours ground time
                createFlight(threeDaysFromNow, threeDaysFromNow.plusHours(2),
                        threeDaysFromNow.plusHours(5), threeDaysFromNow.plusHours(6)),
                //Another flight with more than two hours ground time
                createFlight(threeDaysFromNow, threeDaysFromNow.plusHours(2),
                        threeDaysFromNow.plusHours(3), threeDaysFromNow.plusHours(4),
                        threeDaysFromNow.plusHours(6), threeDaysFromNow.plusHours(7)));
    }

    /**
     * Creates a Flight object based on an array of date and time parameters.
     * Each pair of dates represents the departure and arrival times of a flight segment.
     * The method ensures that an even number of dates is provided, and then constructs
     * the corresponding segments and forms a Flight object from them.
     * @param dates An array of date and time pairs representing segment departure and arrival times.
     * @return A Flight object composed of the provided segments.
     * @throws IllegalArgumentException If an odd number of dates is provided.
     */
    private static Flight createFlight(final LocalDateTime... dates) {
        if ((dates.length % 2) != 0) {
            throw new IllegalArgumentException(
                    "you must pass an even number of dates");
        }
        List<Segment> segments = new ArrayList<>(dates.length / 2);
        for (int i = 0; i < (dates.length - 1); i += 2) {
            segments.add(new Segment(dates[i], dates[i + 1]));
        }
        return new Flight(segments);
    }
}
